using System.Collections;
using System.Diagnostics;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class MultiTouch : MonoBehaviour
{
    [Tooltip("복제할 상자들의 원본")] public GameObject Box;
    [Tooltip("touchLocation이라고 새로 클래스를 만든다음 그 클래스로 리스트를 만들어줌")] public List<TouchLocation> List_TL = new List<TouchLocation>();
    [Tooltip("터치로 조작할 오브젝트")] public Transform TR_Object;

    [SerializeField] private string direction;

    GameObject createBox(Touch t) //상자 복사해주는 매소드
    {
        GameObject b = Instantiate(Box);
        b.name = "touch" + t.fingerId;
        b.transform.SetParent(transform);
        b.transform.GetChild(0).GetComponent<Text>().text = "touch" + t.fingerId.ToString();
        b.SetActive(true);
        b.transform.position = t.position;
        return b;
    }
    void Start()
    {
    }
    private void Update()
    {
        for (int i = 0; i < Input.touchCount; i++)
        {
            Touch t = Input.GetTouch(i);
            //처음 클릭했을 때
            if (t.phase == TouchPhase.Began)
            {
                List_TL.Add(new TouchLocation(t.fingerId, createBox(t)));
            }
            else if (t.phase == TouchPhase.Moved)
            {
                TouchLocation thisTouch = List_TL.Find(TouchLocation => TouchLocation.TouchId == t.fingerId);
                thisTouch.Box.transform.position = t.position;
            }
            else if (t.phase == TouchPhase.Ended)
            {
                TouchLocation thisTouch = List_TL.Find(TouchLocation => TouchLocation.TouchId == t.fingerId);
                Destroy(thisTouch.Box);
                List_TL.RemoveAt(List_TL.IndexOf(thisTouch));
            }
        }
    }
    private void FixedUpdate()
    {
        // 화면에 손가락이 몇개가 닿았는지를 판단하고 반복문을 실행시킨다.
        // touch는 began, moved, ended로 구분이 된다.
        // t.fingerId로 각각의 손가락의 번호를 구분한다.

        //손가락이 두개만 눌려졌을 때 실행시킨다
        // 첫번재 손가락이랑 두번째 손가락을 할당받고

        // 손가락의 그냥 위치를 파악하는것과 위치값에서 델타포지션값을 뺀 값을 찾는것을 변수로 만들어 준다.
        // 그리고 두개의 위치의 벡터값을 구한다음 뺀 차이만큼 크기를 조절한다.
        if (Input.touchCount == 2)
        {
            Touch firstTouch = Input.GetTouch(0);
            Touch secondTouch = Input.GetTouch(1);

            //-------------------------------------scale------------------------------------------------
            Vector2 first_prevpos = firstTouch.position - firstTouch.deltaPosition;
            Vector2 second_Prevpos = secondTouch.position - secondTouch.deltaPosition;

            float prevMagnitude = (first_prevpos - second_Prevpos).magnitude; //순간적 대각선 길이
            float currentMagnitude = (firstTouch.position - secondTouch.position).magnitude; //대각선 길이

            float scaleDifference = currentMagnitude - prevMagnitude; //지금 대각선 길이에서 1프레임 차이로 얼마나 더 대각선이 늘어났는지를 알아보는 것

            //-------------------------------------rotate------------------------------------------------

            float my_Angle = getAngle(firstTouch.position, secondTouch.position);//역탄젠트를 이용한 일반적인 각도값
            float delta_angle = getAngle(first_prevpos, second_Prevpos);//역탄젠트를 이용한 일반적인 각도에서 지금움직이 각도까지 얼마나 더 늘어났는지 아는 값
            float angleDifference = my_Angle - delta_angle; //지금 각도에서 다음 가곧까지의 차이를 계산

            selectDirect(scaleDifference * 0.02f, angleDifference);
            pinchEvent(scaleDifference, angleDifference);
        }
    }

    /// <summary>손가락 두개로 움직였을때 direction 값에 따라 움직이게 해준다</summary>
    /// <param name="_scale">scale.delta 값</param>
    /// <param name="_rotate">rotate.delta 값</param>
    void pinchEvent(float _scale, float _rotate)
    {
        if (direction == "Scale")
            TR_Object.localScale += new Vector3(_scale * 0.01f, _scale * 0.01f, 1);
        else
            TR_Object.eulerAngles += new Vector3(0, 0, _rotate);
    }
    /// <summary>손가락 두개로 움직였을때 direction 값을 지정해준다</summary>
    /// <param name="_scale">scale.delta 값</param>
    /// <param name="_rotate">rotate.delta 값</param>
    void selectDirect(float _scale, float _rotate)
    {
        if (Mathf.Abs(_scale) > Mathf.Abs(_rotate))
            direction = "Scale";
        else if ((Mathf.Abs(_scale) < Mathf.Abs(_rotate)))
            direction = "Rotate";
    }
    /// <summary>라디안 값을 각도값으로 바꿔준다.</summary>
    float getAngle(Vector2 start, Vector2 end)
    {
        Vector2 angle = end - start;
        return Mathf.Atan2(angle.y, angle.x) * Mathf.Rad2Deg; // 역탄젠트로 각도를 계산했다.
    }
}
