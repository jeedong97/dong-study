using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;
using DG.Tweening;
public class joystick : MonoBehaviour, IPointerDownHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IPointerUpHandler
{
    [Tooltip("조이스틱을 감싸고 있는 그래픽")] [SerializeField] RectTransform rT_joyStick;
    [Tooltip("조이스틱을 감싸고 있는 그래픽의 투명도조절")] [SerializeField] CanvasGroup cG_joyStick;

    [Tooltip("조이스틱 알맹이, 다른 오브젝트한테 속도를 부여")] [SerializeField] RectTransform RT_Jr2;

    [Tooltip("조이스틱이 속도를 부여해준 오브젝트")] [SerializeField] RectTransform movingbox;
    [Tooltip("알맹이가 얼마나 움직였는지를 파악")] private Vector2 Movedpos;
    [Tooltip("알맹이 이동거리로 반지름 계신")] private float radius;
    [Tooltip("알맹이 이동거리로 반지름 계신")] private bool IsjoystickAct = false;

    //게임 조이스틱 역할을 해주는건 0으로 시작한다.
    void Start()
    {
        cG_joyStick.alpha = 0;
        cG_joyStick.blocksRaycasts = false;
    }
    // 화면에 손가락은 터치환 손가락을 터치한 순간면에 그 위치에 조이스틱이 생긴다.
    public void OnPointerDown(PointerEventData e)
    {
        cG_joyStick.alpha = 1;
        rT_joyStick.anchoredPosition = e.position;
        IsjoystickAct = true;
    }
    public void OnBeginDrag(PointerEventData e)
    {

    }
    // 얼마나 움직였는지를 계살할 수 있게 변수 movedpos를 만들어준다
    // 대각선 값이(원점에서 떨어진 거리) 빨간색 조이스틱 크기의 절반보다 작다면
    // 반지름의 길이는 대각선 길이가 된다
    // 대각선의 길이가 조이스틱 크기의 절반보다 크거나 같다면 반지름의 길이는 조이스틱 크기의 절반이 된다.
    public void OnDrag(PointerEventData e)
    {
        Movedpos = e.pressPosition - e.position;
        if (diagonal(Movedpos.x, Movedpos.y) < rT_joyStick.sizeDelta.x / 2)
        {
            //radius => 반지름
            radius = diagonal(Movedpos.x, Movedpos.y);
            dragging();
        }
        else
        {
            radius = rT_joyStick.sizeDelta.x / 2;
            dragging();
        }
    }
    //주니어의 위치는 0,0이된다. 여기서 주니어는 작은 조이스틱을 의미한다.
    public void OnEndDrag(PointerEventData e)
    {
        RT_Jr2.anchoredPosition = Vector2.zero;
    }
    // 손가락을 때면 조이스틱의 알파값은 0이되면서 사리지고 드래그가 안되는 상태가 된다
    public void OnPointerUp(PointerEventData e)
    {
        cG_joyStick.alpha = 0;
        IsjoystickAct = false;
    }
    // 대각선 값을 구한는 방법 
    // Sqrt = 제곱근 , pow 제곱
    // value값을 반환 할건데 피타고라스 정의를 이용
    // (가로의 제곱 + 세로의 제곱) = 대각선의 제곱
    //고로 (가로제곱 + 세로제곱)의 제곱근은 대각선 

    /// <summary>x축과 y축의 위치로 대각선을 구해준다</summary>
    /// <param name="numx">x축 좌표</param>
    /// <param name="numy">y축 좌표</param>
    float diagonal(float numx, float numy)
    {
        float value;
        // value = Mathf.Sqrt(Mathf.Pow(numx, 2) + Mathf.Pow(numy, 2));
        value = new Vector2(numx , numy).magnitude;
        return value;
    }
    // 위에서 반지름 값을 대각선값으로 지정해줬다. 
    // 주니어의 위치는 반지름 곱하기 sin(각도) , 반지름 곱하기 cos(각도)
    // 각도를 구하기 위해선 tan(r) = y/x 를 변형시킨다
    // r = atan2(y/x)가 된다. 따리서 지금 위치의 x좌표와 y좌표를 알면 역탄젠트로 각도를 구할 수 있다.
    /// <summary>조이스틱 내에서만 알맹이가 움직일 수 있게 한다</summary>
    void dragging()
    {
        //  RT_Jr2.anchoredPosition = -Movedpos;
         RT_Jr2.anchoredPosition = new Vector2(radius * -Mathf.Sin(Mathf.Atan2(Movedpos.x, Movedpos.y)), radius * -Mathf.Cos(Mathf.Atan2(Movedpos.x, Movedpos.y)));
    }
    // 박스는 주니어가 원래 있을 위치에서 주니어가 향하고 있는 방향으로 힘이 지속적으로 가해진다.
    /// <summary>알맹이가 부여한 속도로 이동을 하게 한다</summary>
    void moving()
    {
        movingbox.anchoredPosition += new Vector2(radius * -Mathf.Sin(Mathf.Atan2(Movedpos.x, Movedpos.y)), radius * -Mathf.Cos(Mathf.Atan2(Movedpos.x, Movedpos.y))) / 20;
    }


    //추가) 컴퓨터는 각도를 계산할때 오일러(360)을 쓰는게 아니라 라디안 값을 사용한다. 360  : 2PI임
    // 0~1의 벨류값으로 원을 돌릴때는 2PI * Value를 사용하면 됨 

    // Update is called once per frame
    void Update()
    {
        if (IsjoystickAct == true)
        {
            moving();
        }
    }
}
